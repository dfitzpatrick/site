# Generated by Django 2.1.1 on 2018-11-14 18:35

import api.models
import api.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('api', '0001_initial'), ('api', '0002_documentationlink'), ('api', '0003_offtopicchannelname'), ('api', '0004_role'), ('api', '0005_user'), ('api', '0006_add_help_texts'), ('api', '0007_tag'), ('api', '0008_tag_embed_validator'), ('api', '0009_snakefact'), ('api', '0010_snakeidiom'), ('api', '0011_auto_20181020_1904'), ('api', '0012_specialsnake'), ('api', '0013_specialsnake_image'), ('api', '0014_auto_20181025_1959'), ('api', '0015_auto_20181027_1617'), ('api', '0016_auto_20181027_1619'), ('api', '0017_auto_20181029_1921'), ('api', '0018_auto_20181111_0558'), ('api', '0019_auto_20181112_0548'), ('api', '0020_auto_20181114_1727'), ('api', '0021_auto_20181114_1729'), ('api', '0022_auto_20181114_1732'), ('api', '0023_auto_20181114_1733'), ('api', '0024_auto_20181114_1735'), ('api', '0025_auto_20181114_1736'), ('api', '0026_auto_20181114_1737'), ('api', '0027_auto_20181114_1738'), ('api', '0028_auto_20181114_1741'), ('api', '0029_auto_20181114_1743'), ('api', '0030_auto_20181114_1744')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='SnakeName',
            fields=[
                ('name', models.CharField(help_text="The regular name for this snake, e.g. 'Python'.", max_length=100, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(regex='^([^0-9])+$')])),
                ('scientific', models.CharField(help_text="The scientific name for this snake, e.g. 'Python bivittatus'.", max_length=150, validators=[django.core.validators.RegexValidator(regex='^([^0-9])+$')])),
            ],
        ),
        migrations.CreateModel(
            name='DocumentationLink',
            fields=[
                ('package', models.CharField(help_text='The Python package name that this documentation link belongs to.', max_length=50, primary_key=True, serialize=False)),
                ('base_url', models.URLField(help_text='The base URL from which documentation will be available for this project. Used to generate links to various symbols within this package.')),
                ('inventory_url', models.URLField(help_text='The URL at which the Sphinx inventory is available for this package.')),
            ],
        ),
        migrations.CreateModel(
            name='OffTopicChannelName',
            fields=[
                ('name', models.CharField(help_text='The actual channel name that will be used on our Discord server.', max_length=96, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(regex='^[a-z0-9-]+$')])),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigIntegerField(help_text='The role ID, taken from Discord.', primary_key=True, serialize=False, validators=[django.core.validators.MinValueValidator(limit_value=0, message='Role IDs cannot be negative.')])),
                ('name', models.CharField(help_text='The role name, taken from Discord.', max_length=100)),
                ('colour', models.IntegerField(help_text='The integer value of the colour of this role from Discord.', validators=[django.core.validators.MinValueValidator(limit_value=0, message='Colour hex cannot be negative.')])),
                ('permissions', models.IntegerField(help_text='The integer value of the permission bitset of this role from Discord.', validators=[django.core.validators.MinValueValidator(limit_value=0, message='Role permissions cannot be negative.'), django.core.validators.MaxValueValidator(limit_value=8589934592, message='Role permission bitset exceeds value of having all permissions')])),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigIntegerField(help_text='The ID of this user, taken from Discord.', primary_key=True, serialize=False, validators=[django.core.validators.MinValueValidator(limit_value=0, message='User IDs cannot be negative.')])),
                ('name', models.CharField(help_text='The username, taken from Discord.', max_length=32)),
                ('discriminator', models.PositiveSmallIntegerField(help_text='The discriminator of this user, taken from Discord.', validators=[django.core.validators.MaxValueValidator(limit_value=9999, message='Discriminators may not exceed `9999`.')])),
                ('avatar_hash', models.CharField(help_text="The user's avatar hash, taken from Discord. Null if the user does not have any custom avatar.", max_length=100, null=True)),
                ('roles', models.ManyToManyField(help_text='Any roles this user has on our server.', to='api.Role')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('title', models.CharField(help_text='The title of this tag, shown in searches and providing a quick overview over what this embed contains.', max_length=100, primary_key=True, serialize=False)),
                ('embed', django.contrib.postgres.fields.jsonb.JSONField(help_text='The actual embed shown by this tag.', validators=[api.validators.validate_tag_embed])),
            ],
            bases=(api.models.ModelReprMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SnakeFact',
            fields=[
                ('fact', models.CharField(help_text='A fact about snakes.', max_length=200, primary_key=True, serialize=False)),
            ],
            bases=(api.models.ModelReprMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SnakeIdiom',
            fields=[
                ('idiom', models.CharField(help_text='A saying about a snake.', max_length=140, primary_key=True, serialize=False)),
            ],
            bases=(api.models.ModelReprMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SpecialSnake',
            fields=[
                ('name', models.CharField(help_text='A special snake name.', max_length=140, primary_key=True, serialize=False)),
                ('info', models.TextField(help_text='Info about a special snake.')),
                ('images', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), help_text='Images displaying this special snake.', size=None)),
            ],
            bases=(api.models.ModelReprMixin, models.Model),
        ),
    ]
